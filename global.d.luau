declare pi: {
	setup: (() -> ()),
	setupSys: (() -> ()),
	setupGpio: (() -> ()),
	setupPhys: (() -> ()),
	pinMode: ((pin: number, mode: number) -> ()),
	onExit: ((callback: () -> ()) -> ()),
	digitalWrite: ((pin: number, state: boolean) -> ()),
	digitalRead: ((pin: number) -> boolean),
	
	wiringPiGpioDeviceGetFd: (() -> number),
	pullUpDownControl: ((pin: number, pud: number) -> number),
	pwmWrite: ((pin: number, value: number) -> ()),
	analogWrite: ((pin: number, value: number) -> ()),
	analogRead: ((pin: number) -> number),

	INPUT: number,
	OUTPUT: number,
	PWM_OUTPUT: number,
	PWM_MS_OUTPUT: number,
	PWM_BAL_OUTPUT: number,
	GPIO_CLOCK: number,
	SOFT_PWM_OUTPUT: number,
	SOFT_TONE_OUTPUT: number,
	PWM_TONE_OUTPUT: number,
	PM_OFF: number,
	LOW: number,
	HIGH: number,
	PUD_OFF: number,
	PUD_DOWN: number,
	PUD_UP: number,
	PWM_MODE_MS: number,
	PWM_MODE_BAL: number,
	INT_EDGE_SETUP: number,
	INT_EDGE_FALLING: number,
	INT_EDGE_RISING: number,
	INT_EDGE_BOTH: number,

	PI_MODEL_A: number,
	PI_MODEL_B: number,
	PI_MODEL_AP: number,
	PI_MODEL_BP: number,
	PI_MODEL_2: number,
	PI_ALPHA: number,
	PI_MODEL_CM: number,
	PI_MODEL_07: number,
	PI_MODEL_3B: number,
	PI_MODEL_ZERO: number,
	PI_MODEL_CM3: number,
	PI_MODEL_ZERO_W: number,
	PI_MODEL_3BP: number,
	PI_MODEL_3AP: number,
	PI_MODEL_CM3P: number,
	PI_MODEL_4B: number,
	PI_MODEL_ZERO_2W: number,
	PI_MODEL_400: number,
	PI_MODEL_CM4: number,
	PI_MODEL_CM4S: number,
	PI_MODEL_5: number,

	PI_VERSION_1: number,
	PI_VERSION_1_1: number,
	PI_VERSION_1_2: number,
	PI_VERSION_2: number,

	PI_MAKER_SONY: number,
	PI_MAKER_EGOMAN: number,
	PI_MAKER_EMBEST: number,
	PI_MAKER_UNKNOWN: number,

	GPIO_LAYOUT_PI1_REV1: number,
	GPIO_LAYOUT_DEFAULT: number,
}

declare task: {
    cancel: (thread: thread) -> (),
    defer: <A..., R...>(f: thread | ((A...) -> R...), A...) -> thread,
    spawn: <A..., R...>(f: thread | ((A...) -> R...), A...) -> thread,
    delay: <A..., R...>(sec: number?, f: thread | ((A...) -> R...), A...) -> thread,
    wait: (sec: number?) -> number,
}
